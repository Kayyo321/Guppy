package io

/** Scan a string */
scans := func(prompt: string): string {
    inBuf: [255, byte] = nil

    /** Inline assembly x86: */
    <- "mov eax, 3"        // syscall number for read
    <- "mov ebx, 0"        // file descriptor: stdin
    <- "mov ecx, [rbp-255] // address of the buffer (inBuf)
    <- "mov edx, 255       // buffer size (255)
    <- "int 0x80"          // call kernel for syscall

    str: string = ""

    for i: int = 0; i < 255; i++ {
        str += inBuf[i]
    }

    return str
}

/** Scan a byte */
scanb := func(prompt: string): byte {
    b: byte

    /** Inline assembly x86 */
    <- "cmp dword[gs:0xC], 1" // Check if the system is 32-bit, or 64-bit
    <- "jne .is64"
    <- "in al, 0x60"
    <- "jmp .done"
    <- ".is64:"
    <- "mov rax, 0x60"
    <- "in al, dx"
    <- ".done:"
    <- "mov byte [rbp-1], al" // Put the read character into b

    return b
}

/** Print a string */
puts := func(s: string) {
    /** Inline assembly x86 */
    <- "mov eax, dword[rbp+4]"     // get the address of the string from the parameter
    <- "mov ebx, 1"           // file descriptor for stdout
    <- "mov ecx, eax"         // address of the string
    <- "mov edx, 0"           // count the length of the string
    <- ".count_loop:"
    <- "cmp byte[ecx+edx], 0" // Check if we've reached the end of the string
    <- "je .print_string"
    <- "inc edx"              // move to the next character
    <- "jmp .count_loop"
    <- ".print_string:"
    <- "mov eax, 4"           // make the syscall for sys_write
    <- "int 0x80"
}

/** Print an int */
puti := func(n: int) {
    if n == 0 {
        puts("0")
        return
    }

    str: string = ""
    sign: int = 1
    if n < 0 {
        sign = -1
    }

    n *= sign

    while n > 0 {
        str += (n % 10) + '0'
        n /= 10
    }

    if sign == -1 {
        str += "-"
    }

    // reverse the string
    start: int = 0
    end: int = len(str)-1
    tmp: string = ""

    while start < end {
        tmp = str[start]
        str[start] = str[end]
        str[end] = tmp
        start++
        end--
    }

    puts(str)
}

/** Print a float */
putf := func(f: float64) {
    flt: float64 = f
    if f < 0 {
        flt *= -1
        puts("-")
    }

    decimal: float64 = flt % 1
    whole: int = flt - decimal

    puti(whole)
    puts(".")

    // multiply by a power of 10 to remove decimal point
    newDecimal: int = decimal * 10000000000

    puti(newDecimal)
}

/** Print a byte */
putb := func(b: byte) {
    /** Inline assembly x86 */
    <- "mov dl, byte [rbp+4]"
    <- "add dl, 48"
    <- "mov ebx, 1"
    <- "mov ecx, dl"
    <- "mov edx, 1"
    <- "mov eax, 4"
    <- "int 0x80"
}

/** Print a boolean */
putbl := func(b: bool) {
    if b == 0 {
        puts("false")
    } else {
        puts("true")
    }
}

/** Print a formatted string */
printf := func(fmt: string, xyz: ...) {
    curBitShift: int = 8 // Skip format str

    /** Inline assembly x86 */
    <- "mov rax, dword[rbp-4]

    for i: int = 0; i < len(fmt); i++ {
        c: byte = fmt[i]

        if c == '%' {
            i++
            c = fmt[i]

            if c == 'd' {
                curBitShift += 4
                d: int = 0

                /** Inline assembly x86 */
                <- "mov dword[rbp-8], dword[rbp+rax]

                puti(d)
            } else if c == 'f' {
                curBitShift += 8
                f: float64 = 0.0

                /** Inline assembly x86 */
                <- "mov qword[rbp-12], qword[rbp+rax]

                putf(f)
            } else if c == 'c' {
                curBitShift++
                b: byte = '_'

                /** Inline assembly x86 */
                <- "mov byte [rbp-5], byte [rbp+rax]

                putb(b)
            } else if c == 's' {
                b: byte = '_'
                s: string = ""

                /** Inline assembly x86 */
                <- "mov eax, rax"
                <- ".loop:"
                <- "cmp byte [rbp+rax], 0"
                <- "je .exit"
                <- "inc rax"
                <- "mov byte [rbp-5], byte [rbp+rax]"

                s += b

                /** Inline assembly x86 */
                <- "jmp .loop"
                <- ".exit:"

                puts(s)
            } else if c == 'b' {
                curBitShift++
                b: bool = false

                /** Inline assembly x86 */
                <- "mov byte [rbp-5], byte [rbp+rax]

                putbl(b)
            } else {
                puts("%")
                putb(c)
            }
        } else {
            putb(c)
        }
    }
}