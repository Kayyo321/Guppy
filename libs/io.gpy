package io

import std

/** Link from stdio.h */
_CLink <- putchar
_CLink <- scanf
_CLink <- getchar
_CLink <- fopen
_CLink <- fread
_CLink <- fclose
_CLink <- fputs

scan := func(): [byte] {
    bs: [256, byte]
    f: string = "%[^\n]%*c"

    /** Inline asm */
    <- "mov rdi, [rbp-256]" // buffer
    <- "mov rsi, 256"       // bufferSz
    <- "mov rdx, [rbp-260]" // fmt
    <- "call scanf"

    return bs
}

scanAsync := func(): byte {
    ascii: int

    /** Inline asm */
    <- "call getchar */
    <- "mov [rbp-4], rax"

    b: byte = ascii

    return b
}

puts := func(s: string) {
    /** Inline asm */
    <- "mov rcx, [rbp+4]
    <- "call puts"
}

puti := func(n: int) {
    if n == 0 {
        puts("0")
        return
    }

    str: string = ""
    sign: int = 1
    if n < 0 {
        sign = -1
    }

    n *= sign

    while n > 0 {
        str += (n % 10) + '0'
        n /= 10
    }

    if sign == -1 {
        str += "-"
    }

    // reverse the string
    start: int = 0
    end: int = len(str)-1
    tmp: string = ""

    while start < end {
        tmp = str[start]
        str[start] = str[end]
        str[end] = tmp
        start++
        end--
    }

    puts(str)
}

putf := func(f: float64) {
    flt: float64 = f
    if f < 0 {
        flt *= -1
        puts("-")
    }

    decimal: float64 = flt % 1
    whole: int = flt - decimal

    puti(whole)
    puts(".")

    // multiply by a power of 10 to remove decimal point
    newDecimal: int = decimal * 10000000000

    puti(newDecimal)
}

putb := func(b: byte) {
    /** Inline asm */
    <- "mov dl, byte [rbp+4]"
    <- "add dl, 48"
    <- "mov ebx, 1"
    <- "mov ecx, dl"
    <- "mov edx, 1"
    <- "mov eax, 4"
    <- "syscall"
}

putbl := func(b: bool) {
    if b == 0 {
        puts("false")
    } else {
        puts("true")
    }
}

printf := func(fmt: string, ...) {
    bs: uint = 4
    i := 0

    l := strlen(fmt)

    while i < l {
        match fmt[i] {
            '%' {
                i++

                match fmt[i] {
                    'd' {
                        // Integer
                        d: int

                        /** Inline asm */
                        <- "mov rax, [rbp-4]"        // rax = bs
                        <- "mov [rbp-16], [rbp+rax]" // d   = params[rax]

                        puti(d)

                        bs += 4
                    }

                    'f' {
                        // Float
                        f: float64

                        /** Inline asm */
                        <- "mov rax, [rbp-4]"        // rax = bs
                        <- "mov [rbp-20], [rbp+rax]" // f   = params[rax]

                        putf(f)

                        bs += 8
                    }

                    'c' {
                        // Byte
                        b: byte

                        /** Inline asm */
                        <- "mov rax, [rbp-4]"        // rax = bs
                        <- "mov [rbp-13], [rbp+rax]" // b   = param[rax]

                        putb(b)

                        bs++
                    }

                    'b' {
                        // Boolean
                        bl: bool

                        /** Inline asm */
                        <- "mov rax, [rbp-4]"        // rax = bs
                        <- "mov [rbp-13], [rbp+rax]" // bl  = param[rax]

                        putbl(bl)

                        bs++
                    }

                    ... {
                        putb('%')
                        putb(fmt[i])
                    }
                }
            }

            ... {
                putb(fmt[i])
            }
        }

        i++
    }
}

printfln := func(fmt: string, ...) {
    bs: uint = 4
    i := 0

    l := strlen(fmt)

    while i < l {
        match fmt[i] {
            '%' {
                i++

                match fmt[i] {
                    'd' {
                        // Integer
                        d: int

                        /** Inline asm */
                        <- "mov rax, [rbp-4]"        // rax = bs
                        <- "mov [rbp-16], [rbp+rax]" // d   = params[rax]

                        puti(d)

                        bs += 4
                    }

                    'f' {
                        // Float
                        f: float64

                        /** Inline asm */
                        <- "mov rax, [rbp-4]"        // rax = bs
                        <- "mov [rbp-20], [rbp+rax]" // f   = params[rax]

                        putf(f)

                        bs += 8
                    }

                    'c' {
                        // Byte
                        b: byte

                        /** Inline asm */
                        <- "mov rax, [rbp-4]"        // rax = bs
                        <- "mov [rbp-13], [rbp+rax]" // b   = param[rax]

                        putb(b)

                        bs++
                    }

                    'b' {
                        // Boolean
                        bl: bool

                        /** Inline asm */
                        <- "mov rax, [rbp-4]"        // rax = bs
                        <- "mov [rbp-13], [rbp+rax]" // bl  = param[rax]

                        putbl(bl)

                        bs++
                    }

                    ... {
                        putb('%')
                        putb(fmt[i])
                    }
                }
            }

            ... {
                putb(fmt[i])
            }
        }

        i++
    }

    putb('\n')
}

readFile := func(fn: string): [byte] {
    x := "r"
    b: [1042, byte]

    /** Inline asm */
    <- "push dword [rbp+8]"    // fn
    <- "push dword [rbp-4]"    // m
    <- "call fopen"
    <- "add esp, 4"
    <- "mov ebx, eax"
    <- "push dword [rbp-1028]" // b
    <- "push dword 1024"
    <- "push dword 1"
    <- "push ebx"
    <- "call fread"

    b1 := b // Copy so it doesn't get deleted on free()

    <- "add esp, 16"
    <- "push ebx"
    <- "call fclose"
    <- "add esp, 4"

    return b1
}

writeFile := func(fn: string, stuff: string): _StdError {
    err: _StdError

    /** Inline asm */
    <- "push [rbp+12]" // fn
    <- "push 'w'"      // write mode
    <- "call fopen"
    <- "add esp, 8"    // clean up stack
    <- "cmp eax, 0"    // read file err
    <- "jz ._file_err"
    <- "push eax"      // file descriptor
    <- "push [rbp+16]" // stuff
    <- "call fputs"
    <- "add esp, 4"    // clean up stack
    <- "cmp eax, 0"    // write file err
    <- "jz ._write_err"
    <- "push eax"
    <- "call fclose"   // close file
    <- "add esp, 4"    // clean up stack
    <- "jmp ._win"


    <- "._file_err:"
    err = newError("Error opening file", _FileError)
    return err

    <- "._write_err:"
    err = newError("Error writing file", _FileError)
    return err

    <- "._win:"
    err = nil
    return err
}