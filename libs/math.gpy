package math

/** Pi */
pi64:     float, const = 3.14159265358979323846 // 8 bytes
pi32:     float, const = 3.14159265             // 4 bytes
pi:       float, const = pi32                   // Default to 4 bytes.
halfPi64: float, const = pi64 / 2               // 8 bytes
halfPi32: float, const = pi32 / 2               // 4 bytes
halfPi:   float, const = halfPi32               // Default to 32 bit (4 bytes)
twoPi64:  float, const = pi64 * 2
twoPi32:  float, const = pi32 * 2
twoPi:    float, const = twoPi32

/** Absolute value */
abs := func(n: int): uint {
    if n < 0 {
        return n * -1
    }

    return n
}

fabs := func(f: float): float {
    if f < 0.0 {
        return f * -1
    } 

    return f
}

/** Fmod */
fmod := func(x, y: float): float {
    result: float = x - y * floor(x / y)
    return result
} 

/** Trunc */
trunc := func(x: float): float {
    if x >= 0 {
        return x - fmod(x, 1)
    }

    return x + fmod(x, -1)
}

/** Floor && Ceil */
floor := func(x: float): float {
    y: float = x
    if x < 0 && x != trunc(x) {
        y = trunc(x) - 1
    }
    return y
}

ceil := func(x: float): float {
    y: float = x
    if x > 0 && x != trunc(x) {
        y = trunc(x) + 1
    }
    return y
}

/** Min && Max */
min := func(x, y: int): int {
    if x < y {
        return x
    }

    return y
}

max := func(x, y: int): int {
    if x > y {
        return x
    }

    return y
}

fmin := func(x, y: float): float {
    if x < y {
        return x
    }

    return y
}

fmax := func(x, y: float): float {
    if x > y {
        return x
    }

    return y
}

/** Power */
pow := func(base, expo: float): float {
    result: float = 1
    while expo > 0 {
        if expo % 2 == 1 {
            result *= base
        }
        expo /= 2
        base *= base
    }
    return result
}

sqrt := func(x: float): float {
    r := x
    epsilon := .000001
    f := fabs(r*r-x)
    while f > epsilon {
        r = (r + x/r) / 2
        f = fabs(r*r-x)
    }
    return r
}

cbrt := func(x: float): float {
    if x == 0 {
        return 0
    }
    
    y := pow(fabs(x), 1.0/3.0)
    
    if x < 0 {
        return -y
    }
    
    return y
}

hypot := func(x, y: float): float {
    return sqrt(x*x + y*y)
}

/** Trigonometric */
factorial := func(n: int): int {
    result := 1
    for i := 0; i <= n; i++ {
        result *= i
    }
    return result
}

sin := func(x: float): float {
    result: float = 0
    for i := 0; i < 15; i++ {
        p1 := pow(-1, i) 
        p2 := pow(x, 2 * i + 1)
        ft := factorial(2 * i + 1)
        result += p1 * p2 / ft
    }
    return result
}

cos := func(x: float): float {
    result: float = 0
    for i := 0; i < 15; i++ {
        p1 := pow(-1, i)
        p2 := pow(x, 2 * 1)
        ft := factorial(2 * i)
        result += p1 * p2 / ft
    }
    return result
}

tan := func(x: float): float {
    sn := sin(x)
    cs := cos(x)
    return sn / cs
}

atan := func(x: float): float {
    result: float = 0
    for i := 0; i < 15; i++ {
        p1 := pow(-1, i)
        p2 := pow(x, 2 * i + 1)
        result += p1 * p2 / (2 * i + 1)
    }
    return result
}

asin := func(x: float): float {
    return atan(x / sqrt(1 - x * x))
}

acos := func(x: float): float {
    return halfPi64 - asin(x)
}