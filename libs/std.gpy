package std

/** Link from stdio.h */
_CLink <- exit
_CLink <- perror

/** Link from stdlib.h */
_CLink <- malloc
_CLink <- realloc
_CLink <- free

strlen := func(s: string): uint {
    l: uint = 0
    s0 := s[0]

    while s0 != '\0' {
        l++
        s0 = s[l]
    } 

    return l
}

/** 
    Array in stack

    +----------------------------+
    |     Size of arr [...0]     |
    |      value 0 [...1] or [0] |
    |      value 1 [...2] or [1] |
    |      value 2 [...3] or [2] |
    |      value 3 [...4] or [3] |
    |         ETC...             |
    +----------------------------+
*/
arrlen := func(arr: [ptr]): uint {
    l: uint = arr[...0] // Return the array value at real index 0; which is the size.
    return l
}

/**
    Range in heap

    +-------------------------------+
    |     Size of rng [...0]        |
    | Type of the next value [...1] |
    |     Value [...2] or [0]       |
    | Type of the next value [...3] |
    |     Value [...4] or [1]       |
    |           ETC...              |
    +-------------------------------+
*/
rnglen := func(rng: range): uint {
    l: uint = rng[...0] // Return the range value at real index 0; which is the size.
    return l
}

malloc := func(sz: uint): ptr {
    x: ptr

    /** Inline asm */
    <- "push [rbp+8]" // byte count
    <- "call malloc"
    <- "mov [rbp-4], [eax]"

    return x
}

realloc := func(p: ptr, nSz: uint): ptr {
    x: ptr

    /** Inline asm */
    <- "push [rbp+12]" // byte count
    <- "push [rbp+8]"  // old ptr
    <- "call realloc"
    <- "mov [rbp-4], [eax]"

    return x
}

free := func(p: ptr): _StdError {
    stdErr: _StdError

    if p == nil {
        stdErr.msg  = "Cannot free nil memory."
        stdErr.code = enum._BadAddress
    }

    /** Inline asm */
    <- "push [rbp+12]" // old ptr
    <- "call free"

    return stdErr
}

/** Error handling */

/** General error codes */
enum {
    _Success,           // 0  
    _Error,             // 1  
    _Misuse,            // 2  
    _PathError,         // 3  
    _FileError,         // 4  
    _AccessDenied,      // 5  
    _AbortTrap,         // 6
    _FloatException,    // 7
    _MathException,     // 8
    _KillSignal,        // 9
    _BusError,          // 10
    _SegmentationFault, // 11
    _MallocError,       // 12
    _PermissionDenied,  // 13
    _BadAddress,        // 14
    _BlockDeviceNeeded, // 15
    _ResourceBusy,      // 16
    _FileAlreadyExists, // 17
    _CrossDeviceLink,   // 18
    _NoSuchDevice,      // 19
    _NoSuchDirectory    // 20
}

_StdError := struct {
    msg: string
    code: int
}

newError := func(_msg: string, _code: int): _StdError {
    r: _StdError
    r.msg = _msg
    r.code = _code
    return r
}

printStderr := func(_msg: string) {
    /** Inline asm */
    <- "push dword [rbp+4]"
    <- "call perror"
}

panic := func(err: _StdError) {
    printStderr(err.msg)
    exit(err.code)
}

exit := func(code: int) {
    /** Inline asm */
    <- "mov eax, [rbp+4]"
    <- "call exit"

    /** Failed if we're here */

    printStderr("External: `exit()` failed for an unknown reason...")
}

assert := func(con: bool, msg: string) {    
    if !con {
        panic(msg, enum._Error)
    }
}