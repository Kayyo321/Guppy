package std

/** Link from stdio.h */
_CLink <- exit
_CLink <- perror

/** Error handling */

/** General error codes */
enum {
    _Success,           // 0  
    _Error,             // 1  
    _Misuse,            // 2  
    _PathError,         // 3  
    _FileError,         // 4  
    _AccessDenied,      // 5  
    _AbortTrap,         // 6
    _FloatException,    // 7
    _MathException,     // 8
    _KillSignal,        // 9
    _BusError,          // 10
    _SegmentationFault, // 11
    _MallocError,       // 12
    _PermissionDenied,  // 13
    _BadAddress,        // 14
    _BlockDeviceNeeded, // 15
    _ResourceBusy,      // 16
    _FileAlreadyExists, // 17
    _CrossDeviceLink,   // 18
    _NoSuchDevice,      // 19
    _NoSuchDirectory    // 20
}

_StdError := struct {
    msg: string
    code: int
}

newError := func(_msg: string, _code: int): _StdError {
    r: _StdError
    r.msg = _msg
    r.code = _code
    return r
}

printStderr := func(_msg: string) {
    /** Inline asm */
    /** TODO: may need to clean up stack. */
    <- "push dword [rbp+4]"
    <- "call perror"
}

panic := func(err: _StdError) {
    printStderr(err.msg)
    exit(err.code)
}

exit := func(code: int) {
    /** Inline asm */
    /** TODO: may need to clean up stack. */
    <- "mov eax, [rbp+4]"
    <- "call exit"

    /** Failed if we're here */

    printStderr("External: `exit()` failed for an unknown reason...")
}

assert := func(con: bool, msg: string) {    
    if !con {
        panic(msg, 1)
    }
}