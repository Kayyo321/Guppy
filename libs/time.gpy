package time

import convert

/** Link from time.h */
_CLink <- time
_CLink <- localtime
_CLink <- asctime
_CLink <- usleep

nanosecond:  int64, const = 1
microsecond: int64, const = 1000 * nanosecond
millisecond: int64, const = 1000 * microsecond
second:      int64, const = 1000 * millisecond
minute:      int64, const = 60   * second
hour:        int64, const = 60   * minute
day:         int64, const = 24   * hour
week:        int64, const = 7    * day
avgMonth:    int64, const = 30   * week // Average
avgYear:     int64, const = 365  * day  // Average

_TimeInfo := struct {
    mday: int
    mon:  int
    year: int
    hour: int
    min:  int
    sec:  int

    toString := func(): string >> ti {
        s: string

        s += ti.mday
        s += '/'
        s += ti.mon
        s += '/'
        s += ti.year
        s += " -- "
        s += ti.hour
        s += ':'
        s += ti.min
        s += ':'
        s += ti.second

        return s
    }
}

time := func(): _TimeInfo {
    /*  time_t t = time(NULL);
        struct tm *tm = localtime(&t);
        printf("%s", asctime(tm));
        return 0;
    }*/

    ti: _TimeInfo

    /** TODO: Impliment */

    return ti
}

sleep := func(ms: int64) {
    /** TODO: Impliment */
}