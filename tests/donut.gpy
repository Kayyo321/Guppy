package main

import io, math, time, convert, std

delay: float64, const = 16 * time | millisecond
ascii: string, const = ".,-~:;=!*#$@"

floatSet := func(arr: [float64], v: float64) {
    l: int = len(arr)
    for i: int = 0; i < l; i++ {
        arr[i] = v
    }
}

byteSet := func(arr: [string], v: string) {
    l: int = len(arr)
    for i: int = 0; i < l; i++ {
        arr[i] = v
    }
}

A, B, i, j: float64 = 0.0
k: int = 0
z: [1760, float64]
b: [1760, string]

io | puts("\033[H\033[2J") // Clear previous stdout.

while true {
    byteSet(b, " ")
    floatSet(z, 0.0)

    for j = 0; j < 6.28; j += .07 {
        for i = 0; i < 6.28; i += .02 {
            c: float64 = math | sin(i)
            d: float64 = math | cos(j)
            e: float64 = math | sin(A)
            f: float64 = math | sin(j)
            g: float64 = math | cos(A)
            h: float64 = d + 2
            D: float64 = 1 / (c * h * e + f * g + 5)
            l: float64 = math | cos(i)
            m: float64 = math | cos(B)
            n: float64 = math | sin(B)
            t: float64 = c * h * g - f * e

            x: int = (40 + 20 * D * (l * h * m - t * n))
            y: int = (12 + 15 * D * (l * h * n + t * m))

            o: int = x + 80 * y

            N: int = 8 * ((f * e - c * d * g) * m - c * d * e - f * g - l * d * n)

            if y < 22 && y > 0 && x > 0 && x < 80 && D > z[o] {
                z[o] = D

                point: int = 0

                if N > 0 {
                    point = N
                }

                b[o] = ascii[point]
            }
        }
    }

    io | puts("\x1b[H")

    for k = 0; k < 1761; k++ {
        v: string = "\n"

        if k % 80 > 0 {
            v = convert | byteToString(b[k])
        }

        io | puts(v)

        A += .00004
        B += .00002
    }

    time | sleep(delay)
}